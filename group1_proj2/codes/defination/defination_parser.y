// Define the tokens

%{
	#include <stdio.h>
	int yyparse();
	int yylex(void);
	void yyerror(char *);
	extern int yylineno;
	int errornumber = 0;
%}

%union
{
	char * stripp;
	int integer;
	float Float;
}

%token LEFT_BRACET
%token RIGTH_BRACET
%token LEFT_PARENTHESIS
%token RIGHT_PARENTHESIS
%token COMMA
%token COMMENT
%token LEFT_CURLYBRACKET
%token RIGHT_CURLYBRACKET
%token ASSIGMENT_OPERATOR
%token SUMMATION_OPERATOR
%token SUBSTRACTION_OPERATOR
%token MULTIPICATION_OPERATOR
%token DIVISION_OPERATOR
%token EQUALS_TO_INDICATOR
%token NOT_EQUALS_TO_INDICATOR
%token LESS_THAN_OR_EQUAL_TO_INDICATOR
%token GREATHER_THAN_OR_EQUAL_TO_INDICATOR
%token LESS_THAN_INDICATOR
%token GREATHER_THAN_INDICATOR
%token INTEGER
%token FLOAT
%token BOOLEAN
%token IDENTIFIER
%token WIDTH
%token HEIGHT
%token STROKE_WIDTH
%token DEF_WIDTH
%token DEF_HEIGHT
%token RECTANGLE
%token LINE
%token OVAL
%token COMPOSITE_SHAPE
%token SHAPE
%token PARAMETER
%token LOCATION
%token COLOR
%token SET
%token DIRECTION
%token BEGIN_OF_MAIN
%token END_OF_MAIN
%token LOCATION_FNC
%token SIZE_FNC
%token COLOR_FNC
%token STROKE_WIDTH_FNC
%token WIDTH_FNC
%token X_VALUE_FNC
%token Y_VALUE_FNC
%token HEIGHT_FNC
%token DIRECTION_FNC
%token ROUNDED_FNC
%token ARROW_FNC
%token ARROW_SIZE_FNC
%token DRAW_FNC
%token DRAW_DEFAULT_FNC
%token FILL_COLOR_FNC
%token FILL_STATE_FNC



%type <integer> INTEGER
%type <float> FLOAT
%type <string> IDENTIFIER
%type <bool> BOOLEAN


%%

program : BEGIN_OF_MAIN stmt_list END_OF_MAIN
				;
stmt_list : stmt 
				| stmt stmt_list
				;

stmt : def_stmt
				| assign_stmt
				| logic_stmt
				| comment_stmt
				;

def_stmt : data_type identifier
					;

data_type : INTEGER
						| FLOAT
						| WIDTH
						| HEIGHT
						| STROKE_WIDTH
						| DEF_WIDTH
						| DEF_HEIGHT
						| RECTANGLE
						| LINE
						| OVAL
						| COMPOSITE_SHAPE
						| SHAPE
					    | PARAMETER
						| LOCATION
						| COLOR
						| SET
						| DIRECTION
						| BOOLEAN
						;
						

identifier : IDENTIFIER 
						| IDENTIFIER assign_stmt
						| IDENTIFIER function_callers
						;
						
assign_stmt : ASSIGMENT_OPERATOR data_type LEFT_PARENTHESIS RIGHT_PARENTHESIS
						| ASSIGMENT_OPERATOR data_type LEFT_PARENTHESIS IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PARENTHESIS
						| ASSIGMENT_OPERATOR data_type LEFT_PARENTHESIS INTEGER COMMA INTEGER RIGHT_PARENTHESIS
						| ASSIGMENT_OPERATOR data_type LEFT_PARENTHESIS IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PARENTHESIS
						| ASSIGMENT_OPERATOR data_type LEFT_PARENTHESIS IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA BOOLEAN COMMA INTEGER RIGHT_PARENTHESIS
						| ASSIGMENT_OPERATOR data_type LEFT_CURLYBRACKET INTEGER COMMA INTEGER COMMA INTEGER COMMA INTEGER RIGHT_CURLYBRACKET
						| ASSIGMENT_OPERATOR data_type LEFT_CURLYBRACKET IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_CURLYBRACKET
						| ASSIGMENT_OPERATOR data_type LEFT_PARENTHESIS INTEGER COMMA INTEGER COMMA INTEGER COMMA FLOAT RIGHT_PARENTHESIS
						| ASSIGMENT_OPERATOR data_type LEFT_PARENTHESIS IDENTIFIER RIGHT_PARENTHESIS
						| ASSIGMENT_OPERATOR LEFT_PARENTHESIS INTEGER COMMA INTEGER RIGHT_PARENTHESIS
						| error_no1
						| error_no2
						| error_no3
						| error_no4
						| error_no5
						;
						
error_no1: data_type LEFT_PARENTHESIS RIGHT_PARENTHESIS {printf("%s, lineNumber: %d\n", "***ERROR***: ASSIGMENT OPERATOR IS NOT USED", yylineno);}
			;
error_no2: ASSIGMENT_OPERATOR LEFT_PARENTHESIS IDENTIFIER COMMA IDENTIFIER COMMA COMMA IDENTIFIER RIGHT_PARENTHESIS {printf("%s, lineNumber: %d\n", "***ERROR***: WRONG COMMA", yylineno);}
			;
error_no3: ASSIGMENT_OPERATOR data_type LEFT_PARENTHESIS INTEGER RIGHT_PARENTHESIS {printf("%s, lineNumber: %d\n", "***ERROR***: INTEGER SHOULD BE IDENTIFIER", yylineno);}
			;
error_no4: ASSIGMENT_OPERATOR data_type LEFT_PARENTHESIS IDENTIFIER COMMA IDENTIFIER RIGHT_PARENTHESIS {printf("%s, lineNumber: %d\n", "***ERROR***: IDENTIFIER SHOULD BE INTEGER", yylineno);}
			;
error_no5:  ASSIGMENT_OPERATOR data_type LEFT_CURLYBRACKET INTEGER COMMA INTEGER COMMA FLOAT COMMA INTEGER RIGHT_CURLYBRACKET {printf("%s, lineNumber: %d\n", "***ERROR***: FLOAT SHOULD BE INTEGER", yylineno);}
			;

function_callers: IDENTIFIER LOCATION_FNC X_VALUE_FNC ASSIGMENT_OPERATOR INTEGER
						| IDENTIFIER LOCATION_FNC Y_VALUE_FNC ASSIGMENT_OPERATOR INTEGER
						| IDENTIFIER LOCATION_FNC Y_VALUE_FNC ASSIGMENT_OPERATOR INTEGER
						| IDENTIFIER HEIGHT_FNC ASSIGMENT_OPERATOR INTEGER
						| IDENTIFIER WIDTH_FNC ASSIGMENT_OPERATOR INTEGER
						| IDENTIFIER STROKE_WIDTH_FNC ASSIGMENT_OPERATOR INTEGER
						| IDENTIFIER ROUNDED_FNC ASSIGMENT_OPERATOR BOOLEAN
						| IDENTIFIER FILL_COLOR_FNC LEFT_PARENTHESIS IDENTIFIER RIGHT_PARENTHESIS
						| DRAW_FNC IDENTIFIER
						| DRAW_DEFAULT_FNC IDENTIFIER
						| IDENTIFIER COLOR_FNC ASSIGMENT_OPERATOR IDENTIFIER LEFT_PARENTHESIS INTEGER COMMA INTEGER COMMA INTEGER COMMA INTEGER RIGHT_PARENTHESIS
						| IDENTIFIER SIZE_FNC ASSIGMENT_OPERATOR LEFT_PARENTHESIS INTEGER COMMA INTEGER RIGHT_PARENTHESIS
						| IDENTIFIER ARROW_FNC ASSIGMENT_OPERATOR BOOLEAN
						| IDENTIFIER ARROW_SIZE_FNC ASSIGMENT_OPERATOR INTEGER
						;
			
logic_stmt :  expr  
		   |  expr logical_op
		   |  expr logical_op expr
		   ;
		   
comment_stmt : COMMENT stmt_list
		   	 ;

expr    : identifier  
		| function_callers
		| SHAPE
	    | COMPOSITE_SHAPE
	    | RECTANGLE
	    | OVAL
	    | LINE
	    ;

logical_op : EQUALS_TO_INDICATOR | NOT_EQUALS_TO_INDICATOR | LESS_THAN_OR_EQUAL_TO_INDICATOR | LESS_THAN_INDICATOR | GREATHER_THAN_OR_EQUAL_TO_INDICATOR |GREATHER_THAN_INDICATOR | ASSIGMENT_OPERATOR
		   ;


%%
/*int main() 
{
  int ret = yyparse();
  if (ret!=0)
    return EXIT_FAILURE;
  return EXIT_SUCCESS;
}
*/
// report errors
void yyerror(char *s) 
{
  printf("%s\n", s);
}